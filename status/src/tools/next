#!/usr/bin/env ruby
#
# Create next status page and update index
#

# Open status/src/index.org
# Search for most recent status entry
# Break out date
# Calculate next date
# Create new status page
# Create new status index
# Rename old status page
# Rename new status page

require 'date'
require 'fileutils'

class StatusNext
  STATUS = "status/src/"        # Status source dir
  INDEX = STATUS + "index.org"  # Current index
  UIDX  = INDEX + ".upd"        # Updated index
  BIDX  = INDEX + "~"           # Backup index
  YPAT = %r{^\*\s(\d\d\d\d)}                    # year pattern
  FPAT = %r{file:(\d\d\d\d)/(\d\d)(\d\d).org}   # file pattern
  def initialize
    check_index
    open_index
    create_status_page
    update_status_index
  end

  # check for year change
  def check_index
    index_year = nil
    IO.foreach(INDEX) do |line|
      case line
      when YPAT
        index_year = Integer($1)
      when FPAT
        raise 'oops: expected year before file' if index_year.nil?
        create_new_index_dates($1,$2,$3,index_year)
        break
      end
    end
  end

  def open_index
    nidx = File.open(UIDX, "w")
    handled = false
    IO.foreach(INDEX) do |line|
      line.chomp!
      if !handled
        if @year_changed
          # wait for blank line
          if line.length == 0
            nidx.puts
            nidx.puts "* #{@next_date.year}"
            nidx.puts
            nidx.puts create_new_index_entry
            handled = !handled
          end
        else
          if line =~ FPAT
            nidx.puts create_new_index_entry
            nidx.puts
            handled = !handled
          end
        end
      end
      nidx.puts line
    end
    raise 'oops' if !handled
  end

  def date_string_form(date)
    sd = "%02d" % date.day
    sm = Date::MONTHNAMES[date.mon]
    sy = date.year.to_s
    "#{sd} #{sm} #{sy}"
  end

  def create_new_index_dates(ys,ms,ds,iy)
    raise 'oops' if iy.nil?
    y = Integer(ys)
    m = Integer(ms.sub(/^0/,'')) # strip any leading zeros
    d = Integer(ds.sub(/^0/,'')) #        -"-
    @last_date = Date.new(y,m,d)
    @next_date = @last_date + 7
    @last_page = "#{ys}/#{ms}#{ds}"
    @year_changed = (@next_date.year != iy)
    STDERR.puts "Found index entry for #{@last_date}"
    STDERR.puts "Create index entry for #{@next_date}"
    if @year_changed
      STDERR.puts "Year changed #{iy}->#{@next_date.year}"
    end
  end

  def create_new_index_entry
    ny = @next_date.year.to_s
    nm = "%02d" % @next_date.mon
    nd = "%02d" % @next_date.day
    ns = date_string_form(@next_date)
    @next_page = "#{ny}/#{nm}#{nd}.org"
    "[[file:#{@next_page}][#{ns}]]"
  end

  def create_status_page
    raise 'oops' if @next_page.nil?
    next_dir = File.dirname(@next_page)
    if @year_changed
      FileUtils.mkdir(STATUS+next_dir)
    end
    nfile = STATUS + @next_page
    STDERR.puts "Create status file #{nfile}"
    npage = File.open(nfile, "w")
    handled = false
    IO.foreach(STATUS + @last_page + ".org") do |line|
      line.chomp!
      if !handled
        if line =~ /^(#\+TITLE:)/
          title = $1
          date_from = date_string_form(@last_date+1)
          date_to = date_string_form(@next_date)
          line = "#{title} #{date_from} - #{date_to}"
          handled = !handled
        end
      end
      npage.puts line
      raise 'oops' if !handled
    end
  end

  def update_status_index
    FileUtils.mv(INDEX,BIDX,force:true)
    FileUtils.mv(UIDX, INDEX)
  end

end


StatusNext.new
